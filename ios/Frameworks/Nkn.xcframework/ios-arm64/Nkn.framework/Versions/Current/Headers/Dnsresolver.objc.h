// Objective-C API for talking to github.com/nknorg/dns-resolver-go Go package.
//   gobind -lang=objc github.com/nknorg/dns-resolver-go
//
// File is generated by gobind. Do not edit.

#ifndef __Dnsresolver_H__
#define __Dnsresolver_H__

@import Foundation;
#include "ref.h"
#include "Universe.objc.h"


@class DnsresolverConfig;
@class DnsresolverResolver;

/**
 * Config is the Resolver configuration.
 */
@interface DnsresolverConfig : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
- (nonnull instancetype)init;
@property (nonatomic) NSString* _Nonnull prefix;
// skipped field Config.CacheTimeout with unsupported type: time.Duration

@property (nonatomic) long dialTimeout;
@property (nonatomic) NSString* _Nonnull dnsServer;
@end

/**
 * Resolver implement ETH resolver.
 */
@interface DnsresolverResolver : NSObject <goSeqRefInterface> {
}
@property(strong, readonly) _Nonnull id _ref;

- (nonnull instancetype)initWithRef:(_Nonnull id)ref;
/**
 * NewResolver creates a Resolver. If config is nil, the default Resolver config will be used.
 */
- (nullable instancetype)init:(DnsresolverConfig* _Nullable)config;
/**
 * Resolve wraps ResolveContext with background context.
 */
- (NSString* _Nonnull)resolve:(NSString* _Nullable)address error:(NSError* _Nullable* _Nullable)error;
// skipped method Resolver.ResolveContext with unsupported parameter or return types

@end

/**
 * DNS_PREFIX domain prefix
 */
FOUNDATION_EXPORT NSString* _Nonnull const DnsresolverDNS_PREFIX;
/**
 * PREFIX Protocol prefix
 */
FOUNDATION_EXPORT NSString* _Nonnull const DnsresolverPREFIX;
/**
 * TXT_PREFIX  TXT record parameter name
 */
FOUNDATION_EXPORT NSString* _Nonnull const DnsresolverTXT_PREFIX;

@interface Dnsresolver : NSObject
// skipped variable DefaultConfig with unsupported type: github.com/nknorg/dns-resolver-go.Config

/**
 * ErrInvalidAddress is returned when a string representing an address
is not actually a valid address.
 */
+ (NSError* _Nullable) errInvalidAddress;
+ (void) setErrInvalidAddress:(NSError* _Nullable)v;

/**
 * ErrInvalidRecord is returned when the nkn entry in a TXT record
does not follow the proper nkn format ("nkn=<path>")
 */
+ (NSError* _Nullable) errInvalidRecord;
+ (void) setErrInvalidRecord:(NSError* _Nullable)v;

/**
 * ErrResolveFailed is returned when a resolution failed, most likely
due to a network error.
 */
+ (NSError* _Nullable) errResolveFailed;
+ (void) setErrResolveFailed:(NSError* _Nullable)v;

@end

/**
 * GetDefaultConfig returns the default Resolver config with nil pointer
fields set to default.
 */
FOUNDATION_EXPORT DnsresolverConfig* _Nullable DnsresolverGetDefaultConfig(void);

FOUNDATION_EXPORT BOOL DnsresolverIsEmail(NSString* _Nullable email);

/**
 * MergeConfig merges a given Resolver config with the default Resolver config
recursively. Any non zero value fields will override the default config.
 */
FOUNDATION_EXPORT DnsresolverConfig* _Nullable DnsresolverMergeConfig(DnsresolverConfig* _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * NewResolver creates a Resolver. If config is nil, the default Resolver config will be used.
 */
FOUNDATION_EXPORT DnsresolverResolver* _Nullable DnsresolverNewResolver(DnsresolverConfig* _Nullable config, NSError* _Nullable* _Nullable error);

/**
 * ParseTXT parses a TXT record value.
 */
FOUNDATION_EXPORT NSString* _Nonnull DnsresolverParseTXT(NSString* _Nullable txt, NSString* _Nullable key, NSError* _Nullable* _Nullable error);

#endif
